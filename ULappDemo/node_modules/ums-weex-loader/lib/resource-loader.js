const Parser = require('fastparse')
const fs = require('fs')
const pathTo = require('path')
const loaderUtils = require('loader-utils')

var html = {
  "html": {
    "//": "linecomment",
    "<!--": "tagComment",
    "<image.*?image>": function (match, index, matchLength) {
      let path = {}
      path.value = match.replace(/:?src=\s*["|'](\S*)["|']/i, function (res, $1) {
        var filePath = $1
        if (/https?/.test(filePath) || res[0] == ':') {
          return res
        }
        return ':src=\'require(' + loaderUtils.stringifyRequest(this, filePath) + ')\''
      })
      path.index = index
      path.length = matchLength
      this.result.push(path)
    }
  },
  "tagComment": {
    "-->": "html"
  }
}

var js = {
  "js": {
    "//": "linecomment",
    "[\"|\']?src.*": function (output, index, matchLength) {
      // [\"|\']?src[\"|\']?:\s*[\"|\']url\((.*)\)
      var result = {}
      var filePath = output.match(/url\(['|"]?(.*?)['|"]?\)/)
      if (filePath) {
        filePath = filePath[1]
        var ext = pathTo.extname(filePath)
        if (ext === '.ttf' && !/https?/.test(filePath) && filePath.indexOf('//') !== 0) {
          result.value = "\"src\":" + `"url('" + require('${filePath}') + "')"`
        } else {
          result.value = output
        }
        result.index = index
        result.length = matchLength
        this.result.push(result)
      } else {
        filePath = output.match(/[\'|\"]([\w|\.|\/]*)[\'|\"]/g)
        if (filePath && filePath.length == 1) {
          filePath = filePath[0]
          result.value = "\"src\":" + `"url('" + require(${filePath}) + "')"`
          result.index = index
          result.length = matchLength
          this.result.push(result)
        } else {
          this.result.push({value: '', index, length:matchLength})
        }
      }
    }
  }
}

var description = {
  html,
  js
}

function comment (type) {
  return {
    "comment": {
      "\\*/": type,
      "@licen[cs]e\\s((?:[^*\n]|\\*+[^*/\n])*)": function(match, licenseText) {
        this.licences.push(licenseText.trim());
      }
    },
    "linecomment": {
      "\n": type,
      "@licen[cs]e\\s(.*)": function(match, licenseText) {
        this.licences.push(licenseText.trim());
      }
    }
  }
}


function convert (type, content) {
  let collection = Object.assign(description[type], comment(type))
  var parser = new Parser(collection)
  var actual = parser.parse(type, content, {
    result: []
  })
  let changeIndex = 0
  actual.result.forEach(path => {
    if (path.value) {
      let subStr = content.substr(path.index + changeIndex, path.length)
      changeIndex += path.value.length - path.length
      // var arr = content.split(subStr)
      // content = arr.join(path.value)
      content = content.replace(subStr, function(res) {
        return path.value
      })
    }
  });
  return content
}

module.exports = function (content) {
  var loaderContext = this
  var option = loaderUtils.getOptions(loaderContext)
  var type = option.type

  return convert(type, content)
}

