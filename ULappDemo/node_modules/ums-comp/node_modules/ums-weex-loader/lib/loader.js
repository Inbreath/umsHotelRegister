var loaderUtils = require('loader-utils')
var path = require('path')
var genId = require('./gen-id')
var assign = require('object-assign')
var styleRewriter = require('./style-rewriter.js')
var normalize = require('./normalize')
var parse = require('./parser')

var selectorPath = normalize.lib('selector')
var templateLoaderPath = normalize.lib('template-loader')
var templateCompilerPath = normalize.lib('template-compiler')
var styleRewriterPath = normalize.lib('style-rewriter')
var styleLoaderPath = normalize.lib('style-loader')
var scriptLoaderPath = normalize.lib('script-loader')
var resourceLoaderPath = normalize.lib('resource-loader')

function getRawRequest (
  { resource, loaderIndex, loaders },
  excludedPreLoaders = /eslint-loader/
) {
  return loaderUtils.getRemainingRequest({
    resource: resource,
    loaderIndex: loaderIndex,
    loaders: loaders.filter(loader => !excludedPreLoaders.test(loader.path))
  })
}

var hasBabel = false
try {
  hasBabel = !!require('babel-loader')
} catch (e) {}

var hasBuble = false
try {
  hasBuble = !!require('buble-loader')
} catch (e) {}

var rewriterInjectRE = /\b(css(?:-loader)?(?:\?[^!]+)?)(?:!|$)/

var defaultLang = {
  template: 'html',
  styles: 'css',
  script: 'js'
}

var checkNamedExports =
  'if (Object.keys(__vue_exports__).some(function (key) { return key !== "default" && key !== "__esModule" })) {' +
  'console.error("named exports are not supported in *.vue files.")}\n'

module.exports = function (content) {
  this.cacheable && this.cacheable()
  var loaderContext = this
  var query = loaderUtils.getOptions(this) || {}
  var options = this.options.__vueOptions__ = Object.assign(
    {},
    this.options.vue,
    this.vue,
    query
  )
  var isProduction = this.minimize || process.env.NODE_ENV === 'production'
  var params = loaderUtils.parseQuery(this.resourceQuery)
  var filePath = this.resourcePath
  var fileName = path.basename(filePath)
  var moduleId = 'data-v-' + genId(path.relative(process.cwd(), filePath))
  var styleRewirter = styleRewriterPath + '?id=' + moduleId
  var rawRequest = getRawRequest(loaderContext, options.excludedPreLoaders)
  var bubleOptions = hasBuble && options.buble ? '?' + JSON.stringify(options.buble) : ''
  var defaultLoaders = {
    html: templateCompilerPath + '?id=' + moduleId  + 
           '!' + resourceLoaderPath + '?type=html',
    css:  styleLoaderPath,
    js:   scriptLoaderPath + '!' + (hasBuble ? ('buble-loader' + bubleOptions) : hasBabel ? 'babel-loader' : '') + 
           '!' + resourceLoaderPath + '?type=js'
  }
  var loaders = assign({}, defaultLoaders, options.loader)

  function stringifyLoaders (loaders) {
    return loaders.map(function (obj) {
      return obj && typeof obj === 'object' && typeof obj.loader === 'string'
        ? obj.loader + (obj.options ? '?' + JSON.stringify(obj.options) : '')
        : obj
    }).join('!')
  }

  function getSelectorString (type, index) {
    return selectorPath +
      '?type=' + type +
      '&index=' + index + '!'
  }

  function getRequire (type, part, index, scoped) {
    return 'require(' + getRequireString(type, part, index, scoped) + ')\n'
  }

  function getRequireString (type, part, index, scoped) {
    return loaderUtils.stringifyRequest(loaderContext,
      '!!' +
      getLoaderString(type, part, index, scoped) +
      getSelectorString(type, index || 0) +
      rawRequest
    )
  }

  function getRequireForImport (type, impt, scoped) {
    return 'require(' +
      getRequireForImportString(type, impt, scoped) +
    ')\n'
  }

  function getRequireForImportString (type, impt, scoped) {
    return loaderUtils.stringifyRequest(loaderContext,
      '!!' +
      getLoaderString(type, impt, -1, scoped) +
      impt.src
    )
  }

  function hasRecyclable (template) {
    return !!(template && template.attrs && template.attrs.recyclable)
  }

  function addCssModulesToLoader (loader, part, index) {
    if (!part.module) return loader
    var option = options.cssModules || {}
    var DEFAULT_OPTIONS = {
      modules: true,
      importLoader: true
    }
    var OPTIONS = {
      localIdentName: '[hash:base64]'
    }
    return loader.replace(/((?:^|!)css(?:-loader)?)(\?[^!]*)?/, function (m, $1, $2) {
      // $1: !css-loader
      // $2: ?a=b
      var query = loaderUtils.parseQuery($2)
      Object.assign(query, OPTIONS, option, DEFAULT_OPTIONS)
      if (index !== -1) {
        // Note:
        //   Class name is generated according to its filename.
        //   Different <style> tags in the same .vue file may generate same names.
        //   Append `_[index]` to class name to avoid this.
        query.localIdentName += '_' + index
      }
      return $1 + '?' + JSON.stringify(query)
    })
  }

  function getLoaderString (type, part, index, scoped) {
    var lang = part.lang || defaultLang[type]
    var loader = loaders[lang]
    var rewriter = type === 'styles' ? styleRewirter + (scoped ? '&scoped=true' : '!') : ''
    var injectString = (type === 'script' && query.inject) ? 'inject!' : ''
    if (loader !== undefined) {
      if (Array.isArray(loader)) {
        loader = stringifyLoaders(loader)
      }
      if (type === 'styles') {
        loader = addCssModulesToLoader(loader, part, index)
      }
      if (type === 'template' && hasRecyclable(part)) {
        loader += '&recyclable=true'
      }
      if (rewriterInjectRE.test(loader)) {
        loader = loader.replace(rewriterInjectRE, function (m, $1) {
          return ensureBang($1) + rewriter
        })
      } else {
        loader = ensureBang(loader) + rewriter
      }
      return injectString + ensureBang(loader)
    } else {
      switch (type) {
        case 'template':
          return defaultLoaders.html + '!' + templateLoaderPath + '?raw&engine=' + lang + '!'
        case 'styles':
          loader = addCssModulesToLoader(defaultLoaders.css, part, index)
          return loader + '!' + rewriter + ensureBang(ensureLoader(lang))
        case 'script':
          return injectString + ensureBang(ensureLoader(lang))
      }
    }
  }

  // sass => sass-loader
  // sass-loader => sass-loader
  // sass?indentedsyntax!css => sass-loader?indentedSyntax!css-loader
  function ensureLoader (lang) {
    return lang.split('!').map(function (loader) {
      return loader.replace(/^([\w-]+)(\?.*)?/, function (_, name, query) {
        return (/-loader$/.test(name) ? name : (name + '-loader')) + (query || '')
      })
    }).join('!')
  }

  function ensureBang (loader) {
    if (loader.charAt(loader.length - 1) !== '!') {
      return loader + '!'
    } else {
      return loader
    }
  }
  var parts = parse(content, fileName, this.sourceMap)
  var scopeId = 'data-v-' + genId(filePath)
  var output = 'var __vue_exports__, __vue_options__\n'
  output += 'var __vue_styles__ = []\n'

  if (parts.styles.length) {
    output += '\n/* style */\n'
    parts.styles.forEach(function (style, i) {
      var requireString = style.src
        ? getRequireForImport('styles', style)
        : getRequire('styles', style, i)
      output += '__vue_styles__.push(' + requireString + ')\n'
    })
  }
  
  var script = parts.script
  if (script) {
    output += '\n/* script */\n'
    output += 
      '__vue_exports__ = ' + (
        script.src
          ? getRequireForImport('script', script)
          : getRequire('script', script)
      )
  }

  var exports =
    '__vue_options__ = __vue_exports__ = __vue_exports__ || {}\n' +
    'if (\n' +
    '  typeof __vue_exports__.default === "object" ||\n' +
    '  typeof __vue_exports__.default === "function"\n'  +
    ')  {\n' +
        (isProduction ? '' : checkNamedExports) +
        '__vue_options__ = __vue_exports__ = __vue_exports__.default\n' +
    '}\n' +
    'if (typeof __vue_options__ === "function") {\n' +
    '  __vue_optinos__ = __vue_options__.options\n' +
    '}\n' +
    (isProduction ? '' : ('__vue_options__.__file = ' + JSON.stringify(filePath))) + '\n'

  var template = parts.template
  if (template) {
    output += '\n/* template */\n'
    output += 'var __vue_template__ = ' + (
      template.src
        ? getRequireForImport('template', template)
        : getRequire('template', template)
    )
    exports +=
      '__vue_options__.render = __vue_template__.render\n' +
      (hasRecyclable(template) ? '__vue_options__["@render"] = __vue_template__["@render"]\n' : '') +
      '__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n'
  }

  if (parts.styles.length) {
    exports += '__vue_options__.scopedId = "' + scopeId + '"\n'
  }

  exports += '__vue_options__.style = __vue_options__.style || {}\n' +
  '__vue_styles__.forEach(function (module) {\n' +
  '  for (var name in module) {\n' +
  '    __vue_options__.style[name] = module[name]\n' +
  '  }\n' +
  '})\n'

  // support to register static styles
  exports += 'if (typeof __register_static_styles__ === "function") {\n' +
  '  __register_static_styles__(__vue_options__._scopeId, __vue_styles__)\n' +
  '}\n'
  
  if (!query.inject) {
    output += exports
    if (options.esModule) {
     output += '\nexports.__esModule = true;\nexports["default"] = __vue_exports__\n'
    } else {
     output += '\nmodule.exports = __vue_exports__\n'
    }
  } else {
    // inject-loader support
    output +=
      '\n/* dependency injection */\n' +
      'module.exports = function (injections) {\n' +
      '  __vue_exports__ = __vue_exports__(injections)\n' +
      exports +
      '  return __vue_exports__\n' +
      '}'
  }

  if (params.entry) {
    output += 'module.exports.el = \'' + params.entry + '\'\n' +
      'new Vue(module.exports)\n'
  }
  return output
}
